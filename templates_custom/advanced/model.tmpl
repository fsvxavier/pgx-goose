// Package {{.Package}} contém as estruturas de dados para a tabela {{.Table.Name}}
// Code generated by pgx-goose with PostgreSQL templates. DO NOT EDIT.
package {{.Package}}

import (
	"time"
)

// {{.StructName}} representa a estrutura da tabela {{.Table.Name}}
{{- if .Table.Comment}}
// {{.Table.Comment}}
{{- end}}
type {{.StructName}} struct {
{{- range .Table.Columns}}
	{{toPascalCase .Name}} {{.GoType}} `json:"{{.Name}}" db:"{{.Name}}"{{if .IsPrimaryKey}} gorm:"primaryKey"{{end}}{{if not .IsNullable}} gorm:"not null"{{end}}`{{if .Comment}} // {{.Comment}}{{end}}
{{- end}}
}

// TableName retorna o nome da tabela no banco de dados
func ({{lower (slice .StructName 0 1)}} *{{.StructName}}) TableName() string {
	return "{{.Table.Name}}"
}

// IsEmpty verifica se a estrutura está vazia (todos os campos com valores zero)
func ({{lower (slice .StructName 0 1)}} *{{.StructName}}) IsEmpty() bool {
{{- range .Table.Columns}}
{{- if eq .GoType "string"}}
	if {{lower (slice $.StructName 0 1)}}.{{toPascalCase .Name}} != "" {
		return false
	}
{{- else if or (eq .GoType "int") (eq .GoType "int32") (eq .GoType "int64")}}
	if {{lower (slice $.StructName 0 1)}}.{{toPascalCase .Name}} != 0 {
		return false
	}
{{- else if eq .GoType "bool"}}
	if {{lower (slice $.StructName 0 1)}}.{{toPascalCase .Name}} {
		return false
	}
{{- else if eq .GoType "time.Time"}}
	if !{{lower (slice $.StructName 0 1)}}.{{toPascalCase .Name}}.IsZero() {
		return false
	}
{{- end}}
{{- end}}
	return true
}

// Clone cria uma cópia da estrutura
func ({{lower (slice .StructName 0 1)}} *{{.StructName}}) Clone() *{{.StructName}} {
	if {{lower (slice .StructName 0 1)}} == nil {
		return nil
	}
	
	clone := *{{lower (slice .StructName 0 1)}}
	return &clone
}

// IsEmpty verifica se a estrutura está vazia (todos os campos com valores zero)
func ({{.ReceiverName}} *{{.StructName}}) IsEmpty() bool {
{{- range .Fields}}
{{- if eq .Type "string"}}
	if {{$.ReceiverName}}.{{.Name}} != "" {
		return false
	}
{{- else if eq .Type "int" "int32" "int64"}}
	if {{$.ReceiverName}}.{{.Name}} != 0 {
		return false
	}
{{- else if eq .Type "bool"}}
	if {{$.ReceiverName}}.{{.Name}} {
		return false
	}
{{- else if contains .Type "time.Time"}}
	if !{{$.ReceiverName}}.{{.Name}}.IsZero() {
		return false
	}
{{- else if contains .Type "uuid.UUID"}}
	if {{$.ReceiverName}}.{{.Name}} != uuid.Nil {
		return false
	}
{{- else if contains .Type "decimal.Decimal"}}
	if !{{$.ReceiverName}}.{{.Name}}.IsZero() {
		return false
	}
{{- else}}
	// Campo {{.Name}} do tipo {{.Type}} - implementar verificação conforme necessário
{{- end}}
{{- end}}
	return true
}

// Validate valida os dados da estrutura usando as tags de validação
func ({{.ReceiverName}} *{{.StructName}}) Validate() error {
{{- if .NeedsValidation}}
	validator := validator.New()
	return validator.Struct({{.ReceiverName}})
{{- else}}
	// Nenhuma validação configurada
	return nil
{{- end}}
}

{{- if .HasCreatedAt}}

// SetCreatedAt define o timestamp de criação
func ({{.ReceiverName}} *{{.StructName}}) SetCreatedAt() {
	{{.ReceiverName}}.CreatedAt = time.Now()
}
{{- end}}

{{- if .HasUpdatedAt}}

// SetUpdatedAt define o timestamp de atualização
func ({{.ReceiverName}} *{{.StructName}}) SetUpdatedAt() {
	{{.ReceiverName}}.UpdatedAt = time.Now()
}
{{- end}}

{{- if .HasSoftDelete}}

// SetDeletedAt define o timestamp de exclusão (soft delete)
func ({{.ReceiverName}} *{{.StructName}}) SetDeletedAt() {
	now := time.Now()
	{{.ReceiverName}}.DeletedAt = &now
}

// IsDeleted verifica se o registro foi excluído (soft delete)
func ({{.ReceiverName}} *{{.StructName}}) IsDeleted() bool {
	return {{.ReceiverName}}.DeletedAt != nil
}
{{- end}}

// Clone cria uma cópia da estrutura
func ({{.ReceiverName}} *{{.StructName}}) Clone() *{{.StructName}} {
	if {{.ReceiverName}} == nil {
		return nil
	}
	
	clone := *{{.ReceiverName}}
	return &clone
}
