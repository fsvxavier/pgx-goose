//go:generate mockgen -source={{.StructName}}_repository.go -destination=mocks/mock_{{lower .StructName}}_repository.go -package=mocks

// Package {{.Package}} contém os mocks para {{.InterfaceName}} usando GoMock
// Code generated by pgx-goose with PostgreSQL templates. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"reflect"

	"github.com/fsvxavier/isis-golang-lib/db/postgresql/common"
	"github.com/golang/mock/gomock"
)

// {{.MockName}} é um mock do {{.InterfaceName}} usando GoMock
type {{.MockName}} struct {
	ctrl     *gomock.Controller
	recorder *{{.MockName}}MockRecorder
}

// {{.MockName}}MockRecorder é o mock recorder para {{.MockName}}
type {{.MockName}}MockRecorder struct {
	mock *{{.MockName}}
}

// New{{.MockName}} cria uma nova instância do mock
func New{{.MockName}}(ctrl *gomock.Controller) *{{.MockName}} {
	mock := &{{.MockName}}{ctrl: ctrl}
	mock.recorder = &{{.MockName}}MockRecorder{mock}
	return mock
}

// EXPECT retorna um object que permite ao caller indicar chamadas esperadas
func (m *{{.MockName}}) EXPECT() *{{.MockName}}MockRecorder {
	return m.recorder
}

// Create mock para o método Create
func (m *{{.MockName}}) Create(ctx context.Context, entity *{{.StructName}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indica uma chamada esperada de Create
func (mr *{{.MockName}}MockRecorder) Create(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*{{.MockName}})(nil).Create), ctx, entity)
}

// GetByID mock para o método GetByID
func (m *{{.MockName}}) GetByID(ctx context.Context, id {{.PrimaryKeyType}}) (*{{.StructName}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*{{.StructName}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indica uma chamada esperada de GetByID
func (mr *{{.MockName}}MockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*{{.MockName}})(nil).GetByID), ctx, id)
}

// Update mock para o método Update
func (m *{{.MockName}}) Update(ctx context.Context, entity *{{.StructName}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indica uma chamada esperada de Update
func (mr *{{.MockName}}MockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*{{.MockName}})(nil).Update), ctx, entity)
}

// Delete mock para o método Delete
func (m *{{.MockName}}) Delete(ctx context.Context, id {{.PrimaryKeyType}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indica uma chamada esperada de Delete
func (mr *{{.MockName}}MockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*{{.MockName}})(nil).Delete), ctx, id)
}

// GetAll mock para o método GetAll
func (m *{{.MockName}}) GetAll(ctx context.Context, offset, limit int) ([]*{{.StructName}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, offset, limit)
	ret0, _ := ret[0].([]*{{.StructName}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indica uma chamada esperada de GetAll
func (mr *{{.MockName}}MockRecorder) GetAll(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*{{.MockName}})(nil).GetAll), ctx, offset, limit)
}

// Count mock para o método Count
func (m *{{.MockName}}) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indica uma chamada esperada de Count
func (mr *{{.MockName}}MockRecorder) Count(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*{{.MockName}})(nil).Count), ctx)
}

// Exists mock para o método Exists
func (m *{{.MockName}}) Exists(ctx context.Context, id {{.PrimaryKeyType}}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indica uma chamada esperada de Exists
func (mr *{{.MockName}}MockRecorder) Exists(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*{{.MockName}})(nil).Exists), ctx, id)
}

// CreateBatch mock para o método CreateBatch
func (m *{{.MockName}}) CreateBatch(ctx context.Context, entities []*{{.StructName}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", ctx, entities)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatch indica uma chamada esperada de CreateBatch
func (mr *{{.MockName}}MockRecorder) CreateBatch(ctx, entities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*{{.MockName}})(nil).CreateBatch), ctx, entities)
}

// FindBy mock para o método FindBy
func (m *{{.MockName}}) FindBy(ctx context.Context, filters map[string]interface{}, offset, limit int) ([]*{{.StructName}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", ctx, filters, offset, limit)
	ret0, _ := ret[0].([]*{{.StructName}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indica uma chamada esperada de FindBy
func (mr *{{.MockName}}MockRecorder) FindBy(ctx, filters, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*{{.MockName}})(nil).FindBy), ctx, filters, offset, limit)
}

// CountBy mock para o método CountBy
func (m *{{.MockName}}) CountBy(ctx context.Context, filters map[string]interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBy", ctx, filters)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBy indica uma chamada esperada de CountBy
func (mr *{{.MockName}}MockRecorder) CountBy(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBy", reflect.TypeOf((*{{.MockName}})(nil).CountBy), ctx, filters)
}

// UpdatePartial mock para o método UpdatePartial
func (m *{{.MockName}}) UpdatePartial(ctx context.Context, id {{.PrimaryKeyType}}, updates map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartial", ctx, id, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePartial indica uma chamada esperada de UpdatePartial
func (mr *{{.MockName}}MockRecorder) UpdatePartial(ctx, id, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartial", reflect.TypeOf((*{{.MockName}})(nil).UpdatePartial), ctx, id, updates)
}

// CreateTx mock para o método CreateTx
func (m *{{.MockName}}) CreateTx(ctx context.Context, tx common.ITransaction, entity *{{.StructName}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, tx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indica uma chamada esperada de CreateTx
func (mr *{{.MockName}}MockRecorder) CreateTx(ctx, tx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*{{.MockName}})(nil).CreateTx), ctx, tx, entity)
}

// UpdateTx mock para o método UpdateTx
func (m *{{.MockName}}) UpdateTx(ctx context.Context, tx common.ITransaction, entity *{{.StructName}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", ctx, tx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTx indica uma chamada esperada de UpdateTx
func (mr *{{.MockName}}MockRecorder) UpdateTx(ctx, tx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*{{.MockName}})(nil).UpdateTx), ctx, tx, entity)
}

// DeleteTx mock para o método DeleteTx
func (m *{{.MockName}}) DeleteTx(ctx context.Context, tx common.ITransaction, id {{.PrimaryKeyType}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTx", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTx indica uma chamada esperada de DeleteTx
func (mr *{{.MockName}}MockRecorder) DeleteTx(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTx", reflect.TypeOf((*{{.MockName}})(nil).DeleteTx), ctx, tx, id)
}

// CreateBatchTx mock para o método CreateBatchTx
func (m *{{.MockName}}) CreateBatchTx(ctx context.Context, tx common.ITransaction, entities []*{{.StructName}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatchTx", ctx, tx, entities)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatchTx indica uma chamada esperada de CreateBatchTx
func (mr *{{.MockName}}MockRecorder) CreateBatchTx(ctx, tx, entities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchTx", reflect.TypeOf((*{{.MockName}})(nil).CreateBatchTx), ctx, tx, entities)
}

// UpdateBatchTx mock para o método UpdateBatchTx
func (m *{{.MockName}}) UpdateBatchTx(ctx context.Context, tx common.ITransaction, entities []*{{.StructName}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatchTx", ctx, tx, entities)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBatchTx indica uma chamada esperada de UpdateBatchTx
func (mr *{{.MockName}}MockRecorder) UpdateBatchTx(ctx, tx, entities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatchTx", reflect.TypeOf((*{{.MockName}})(nil).UpdateBatchTx), ctx, tx, entities)
}

// DeleteBatchTx mock para o método DeleteBatchTx
func (m *{{.MockName}}) DeleteBatchTx(ctx context.Context, tx common.ITransaction, ids []{{.PrimaryKeyType}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatchTx", ctx, tx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatchTx indica uma chamada esperada de DeleteBatchTx
func (mr *{{.MockName}}MockRecorder) DeleteBatchTx(ctx, tx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatchTx", reflect.TypeOf((*{{.MockName}})(nil).DeleteBatchTx), ctx, tx, ids)
}
