// Package {{.Package}} contém os testes para {{.StructName}}PostgreSQLRepository
// Code generated by pgx-goose with PostgreSQL templates. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// Test{{.StructName}}RepositoryBasic testa operações básicas do repositório
func Test{{.StructName}}RepositoryBasic(t *testing.T) {
	// Este é um template básico de teste
	// Para testes de integração completos, configure um PostgreSQL de teste
	
	t.Run("Create", func(t *testing.T) {
		// TODO: Implementar teste de criação
		t.Skip("Teste de integração não implementado - requer PostgreSQL")
	})
	
	t.Run("GetByID", func(t *testing.T) {
		// TODO: Implementar teste de busca por ID
		t.Skip("Teste de integração não implementado - requer PostgreSQL")
	})
	
	t.Run("Update", func(t *testing.T) {
		// TODO: Implementar teste de atualização
		t.Skip("Teste de integração não implementado - requer PostgreSQL")
	})
	
	t.Run("Delete", func(t *testing.T) {
		// TODO: Implementar teste de exclusão
		t.Skip("Teste de integração não implementado - requer PostgreSQL")
	})
	
	t.Run("GetAll", func(t *testing.T) {
		// TODO: Implementar teste de listagem
		t.Skip("Teste de integração não implementado - requer PostgreSQL")
	})
	
	t.Run("Count", func(t *testing.T) {
		// TODO: Implementar teste de contagem
		t.Skip("Teste de integração não implementado - requer PostgreSQL")
	})
	
	t.Run("Exists", func(t *testing.T) {
		// TODO: Implementar teste de existência
		t.Skip("Teste de integração não implementado - requer PostgreSQL")
	})
}

// Test{{.StructName}}MockRepository testa o repositório usando mocks
func Test{{.StructName}}MockRepository(t *testing.T) {
	ctx := context.Background()
	
	t.Run("Mock Create", func(t *testing.T) {
		// Exemplo de como usar o mock
		mockRepo := NewMock{{.StructName}}Repository()
		
		entity := &{{.StructName}}{
			// Preencha com dados de teste apropriados
		}
		
		// Configure expectativa
		mockRepo.On("Create", ctx, entity).Return(nil)
		
		// Execute
		err := mockRepo.Create(ctx, entity)
		
		// Verifique
		require.NoError(t, err)
		mockRepo.AssertExpectations(t)
	})
	
	t.Run("Mock GetByID", func(t *testing.T) {
		mockRepo := NewMock{{.StructName}}Repository()
		
		expectedEntity := &{{.StructName}}{
			// Preencha com dados esperados
		}
		
		var testID {{.PrimaryKeyType}}
		// Defina o ID de teste apropriado baseado no tipo
		
		// Configure expectativa
		mockRepo.On("GetByID", ctx, testID).Return(expectedEntity, nil)
		
		// Execute
		result, err := mockRepo.GetByID(ctx, testID)
		
		// Verifique
		require.NoError(t, err)
		assert.Equal(t, expectedEntity, result)
		mockRepo.AssertExpectations(t)
	})
}

// Exemplo de teste de estrutura
func Test{{.StructName}}Struct(t *testing.T) {
	t.Run("TableName", func(t *testing.T) {
		entity := &{{.StructName}}{}
		tableName := entity.TableName()
		assert.Equal(t, "{{.Table.Name}}", tableName)
	})
	
	t.Run("IsEmpty", func(t *testing.T) {
		entity := &{{.StructName}}{}
		assert.True(t, entity.IsEmpty())
		
		// Modifique um campo e teste novamente
		// entity.SomeField = "test"
		// assert.False(t, entity.IsEmpty())
	})
	
	t.Run("Clone", func(t *testing.T) {
		original := &{{.StructName}}{
			// Preencha com dados de teste
		}
		
		cloned := original.Clone()
		
		require.NotNil(t, cloned)
		assert.Equal(t, original, cloned)
		
		// Verifique que são instâncias diferentes
		assert.False(t, original == cloned)
	})
	
	t.Run("Clone nil", func(t *testing.T) {
		var entity *{{.StructName}}
		cloned := entity.Clone()
		assert.Nil(t, cloned)
	})
}
