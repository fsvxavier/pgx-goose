// Code generated by pgx-goose. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"testing"
	
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	
	"github.com/fsvxavier/pgx-goose/models"
	"github.com/fsvxavier/pgx-goose/mocks"
)

func Test{{.StructName}}Repository_Create(t *testing.T) {
	mock := &mocks.{{.MockName}}{}
	ctx := context.Background()
	
	{{lower .StructName}} := &models.{{.StructName}}{
		// TODO: Set test data
	}
	
	t.Run("success", func(t *testing.T) {
		mock.On("Create", ctx, {{lower .StructName}}).Return(nil)
		
		err := mock.Create(ctx, {{lower .StructName}})
		
		assert.NoError(t, err)
		mock.AssertExpectations(t)
	})
	
	t.Run("error", func(t *testing.T) {
		mock.On("Create", ctx, {{lower .StructName}}).Return(assert.AnError)
		
		err := mock.Create(ctx, {{lower .StructName}})
		
		assert.Error(t, err)
		mock.AssertExpectations(t)
	})
}

func Test{{.StructName}}Repository_GetByID(t *testing.T) {
	mock := &mocks.{{.MockName}}{}
	ctx := context.Background()
	id := {{.PrimaryKeyType}}(1) // TODO: Set appropriate test ID
	
	{{lower .StructName}} := &models.{{.StructName}}{
		// TODO: Set test data
	}
	
	t.Run("success", func(t *testing.T) {
		mock.On("GetByID", ctx, id).Return({{lower .StructName}}, nil)
		
		result, err := mock.GetByID(ctx, id)
		
		assert.NoError(t, err)
		assert.Equal(t, {{lower .StructName}}, result)
		mock.AssertExpectations(t)
	})
	
	t.Run("not found", func(t *testing.T) {
		mock.On("GetByID", ctx, id).Return((*models.{{.StructName}})(nil), assert.AnError)
		
		result, err := mock.GetByID(ctx, id)
		
		assert.Error(t, err)
		assert.Nil(t, result)
		mock.AssertExpectations(t)
	})
}

func Test{{.StructName}}Repository_Update(t *testing.T) {
	mock := &mocks.{{.MockName}}{}
	ctx := context.Background()
	
	{{lower .StructName}} := &models.{{.StructName}}{
		// TODO: Set test data
	}
	
	t.Run("success", func(t *testing.T) {
		mock.On("Update", ctx, {{lower .StructName}}).Return(nil)
		
		err := mock.Update(ctx, {{lower .StructName}})
		
		assert.NoError(t, err)
		mock.AssertExpectations(t)
	})
	
	t.Run("error", func(t *testing.T) {
		mock.On("Update", ctx, {{lower .StructName}}).Return(assert.AnError)
		
		err := mock.Update(ctx, {{lower .StructName}})
		
		assert.Error(t, err)
		mock.AssertExpectations(t)
	})
}

func Test{{.StructName}}Repository_Delete(t *testing.T) {
	mock := &mocks.{{.MockName}}{}
	ctx := context.Background()
	id := {{.PrimaryKeyType}}(1) // TODO: Set appropriate test ID
	
	t.Run("success", func(t *testing.T) {
		mock.On("Delete", ctx, id).Return(nil)
		
		err := mock.Delete(ctx, id)
		
		assert.NoError(t, err)
		mock.AssertExpectations(t)
	})
	
	t.Run("error", func(t *testing.T) {
		mock.On("Delete", ctx, id).Return(assert.AnError)
		
		err := mock.Delete(ctx, id)
		
		assert.Error(t, err)
		mock.AssertExpectations(t)
	})
}

func Test{{.StructName}}Repository_List(t *testing.T) {
	mock := &mocks.{{.MockName}}{}
	ctx := context.Background()
	limit := 10
	offset := 0
	
	{{lower .StructName}}s := []*models.{{.StructName}}{
		// TODO: Set test data
	}
	
	t.Run("success", func(t *testing.T) {
		mock.On("List", ctx, limit, offset).Return({{lower .StructName}}s, nil)
		
		result, err := mock.List(ctx, limit, offset)
		
		assert.NoError(t, err)
		assert.Equal(t, {{lower .StructName}}s, result)
		mock.AssertExpectations(t)
	})
	
	t.Run("error", func(t *testing.T) {
		mock.On("List", ctx, limit, offset).Return([]*models.{{.StructName}}(nil), assert.AnError)
		
		result, err := mock.List(ctx, limit, offset)
		
		assert.Error(t, err)
		assert.Nil(t, result)
		mock.AssertExpectations(t)
	})
}

func Test{{.StructName}}Repository_Count(t *testing.T) {
	mock := &mocks.{{.MockName}}{}
	ctx := context.Background()
	expectedCount := int64(5)
	
	t.Run("success", func(t *testing.T) {
		mock.On("Count", ctx).Return(expectedCount, nil)
		
		count, err := mock.Count(ctx)
		
		assert.NoError(t, err)
		assert.Equal(t, expectedCount, count)
		mock.AssertExpectations(t)
	})
	
	t.Run("error", func(t *testing.T) {
		mock.On("Count", ctx).Return(int64(0), assert.AnError)
		
		count, err := mock.Count(ctx)
		
		assert.Error(t, err)
		assert.Equal(t, int64(0), count)
		mock.AssertExpectations(t)
	})
}
