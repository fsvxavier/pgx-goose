// Code generated by pgx-goose. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	
	"github.com/stretchr/testify/mock"
	
	"github.com/fsvxavier/pgx-goose/models"
	"github.com/fsvxavier/pgx-goose/repository/interfaces"
)

// {{.MockName}} is a mock implementation of {{.InterfaceName}}
type {{.MockName}} struct {
	mock.Mock
}

// Ensure {{.MockName}} implements {{.InterfaceName}}
var _ interfaces.{{.InterfaceName}} = (*{{.MockName}})(nil)

// Create mocks the Create method
func (m *{{.MockName}}) Create(ctx context.Context, {{lower .StructName}} *models.{{.StructName}}) error {
	args := m.Called(ctx, {{lower .StructName}})
	return args.Error(0)
}

// GetByID mocks the GetByID method
func (m *{{.MockName}}) GetByID(ctx context.Context, id {{.PrimaryKeyType}}) (*models.{{.StructName}}, error) {
	args := m.Called(ctx, id)
	return args.Get(0).(*models.{{.StructName}}), args.Error(1)
}

// Update mocks the Update method
func (m *{{.MockName}}) Update(ctx context.Context, {{lower .StructName}} *models.{{.StructName}}) error {
	args := m.Called(ctx, {{lower .StructName}})
	return args.Error(0)
}

// Delete mocks the Delete method
func (m *{{.MockName}}) Delete(ctx context.Context, id {{.PrimaryKeyType}}) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

// List mocks the List method
func (m *{{.MockName}}) List(ctx context.Context, limit, offset int) ([]*models.{{.StructName}}, error) {
	args := m.Called(ctx, limit, offset)
	return args.Get(0).([]*models.{{.StructName}}), args.Error(1)
}

// Count mocks the Count method
func (m *{{.MockName}}) Count(ctx context.Context) (int64, error) {
	args := m.Called(ctx)
	return args.Get(0).(int64), args.Error(1)
}
