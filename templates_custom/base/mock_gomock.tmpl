// Code generated by pgx-goose. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"

	"github.com/fsvxavier/pgx-goose/models"
)

// {{.MockName}} is a mock of {{.InterfaceName}} interface.
type {{.MockName}} struct {
	ctrl     *gomock.Controller
	recorder *{{.MockName}}MockRecorder
}

// {{.MockName}}MockRecorder is the mock recorder for {{.MockName}}.
type {{.MockName}}MockRecorder struct {
	mock *{{.MockName}}
}

// New{{.MockName}} creates a new mock instance.
func New{{.MockName}}(ctrl *gomock.Controller) *{{.MockName}} {
	mock := &{{.MockName}}{ctrl: ctrl}
	mock.recorder = &{{.MockName}}MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *{{.MockName}}) EXPECT() *{{.MockName}}MockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *{{.MockName}}) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *{{.MockName}}MockRecorder) Count(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*{{.MockName}})(nil).Count), ctx)
}

// Create mocks base method.
func (m *{{.MockName}}) Create(ctx context.Context, {{lower .StructName}} *models.{{.StructName}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, {{lower .StructName}})
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *{{.MockName}}MockRecorder) Create(ctx, {{lower .StructName}} interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*{{.MockName}})(nil).Create), ctx, {{lower .StructName}})
}

// Delete mocks base method.
func (m *{{.MockName}}) Delete(ctx context.Context, id {{.PrimaryKeyType}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *{{.MockName}}MockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*{{.MockName}})(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *{{.MockName}}) GetByID(ctx context.Context, id {{.PrimaryKeyType}}) (*models.{{.StructName}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.{{.StructName}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *{{.MockName}}MockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*{{.MockName}})(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *{{.MockName}}) List(ctx context.Context, limit, offset int) ([]*models.{{.StructName}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.{{.StructName}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *{{.MockName}}MockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*{{.MockName}})(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *{{.MockName}}) Update(ctx context.Context, {{lower .StructName}} *models.{{.StructName}}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, {{lower .StructName}})
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *{{.MockName}}MockRecorder) Update(ctx, {{lower .StructName}} interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*{{.MockName}})(nil).Update), ctx, {{lower .StructName}})
}
